// Generated by gencpp from file ebugs_message/Command.msg
// DO NOT EDIT!


#ifndef EBUGS_MESSAGE_MESSAGE_COMMAND_H
#define EBUGS_MESSAGE_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ebugs_message/Position.h>
#include <ebugs_message/Position.h>

namespace ebugs_message
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : robots_position()
    , target_position()  {
    }
  Command_(const ContainerAllocator& _alloc)
    : robots_position(_alloc)
    , target_position(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ebugs_message::Position_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ebugs_message::Position_<ContainerAllocator> >::other >  _robots_position_type;
  _robots_position_type robots_position;

   typedef  ::ebugs_message::Position_<ContainerAllocator>  _target_position_type;
  _target_position_type target_position;




  typedef boost::shared_ptr< ::ebugs_message::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ebugs_message::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::ebugs_message::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::ebugs_message::Command > CommandPtr;
typedef boost::shared_ptr< ::ebugs_message::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ebugs_message::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ebugs_message::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ebugs_message

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ebugs_message': ['/home/alexandre/ebugs_ws/src/ebugs_message/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ebugs_message::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ebugs_message::Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ebugs_message::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ebugs_message::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ebugs_message::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ebugs_message::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ebugs_message::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f354046c8f89b31b50f4af3a1191dee";
  }

  static const char* value(const ::ebugs_message::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f354046c8f89b31ULL;
  static const uint64_t static_value2 = 0xb50f4af3a1191deeULL;
};

template<class ContainerAllocator>
struct DataType< ::ebugs_message::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebugs_message/Command";
  }

  static const char* value(const ::ebugs_message::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ebugs_message::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Position[] robots_position\n\
Position target_position\n\
================================================================================\n\
MSG: ebugs_message/Position\n\
int16 x\n\
int16 y\n\
int16 angle\n\
";
  }

  static const char* value(const ::ebugs_message::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ebugs_message::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robots_position);
      stream.next(m.target_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ebugs_message::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ebugs_message::Command_<ContainerAllocator>& v)
  {
    s << indent << "robots_position[]" << std::endl;
    for (size_t i = 0; i < v.robots_position.size(); ++i)
    {
      s << indent << "  robots_position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ebugs_message::Position_<ContainerAllocator> >::stream(s, indent + "    ", v.robots_position[i]);
    }
    s << indent << "target_position: ";
    s << std::endl;
    Printer< ::ebugs_message::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.target_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EBUGS_MESSAGE_MESSAGE_COMMAND_H
